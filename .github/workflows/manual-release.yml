name: Manual Release

# 手动触发发布（备用方案）
on:
  workflow_dispatch:
    inputs:
      version:
        description: '发布版本号 (例如: 2.0.1)'
        required: true
        type: string
      prerelease:
        description: '是否为预发布版本'
        required: false
        type: boolean
        default: false
      draft:
        description: '是否创建草稿版本'
        required: false
        type: boolean
        default: false

# 设置权限
permissions:
  contents: write
  pull-requests: read

jobs:
  manual-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Validate inputs
      id: validate
      run: |
        VERSION="${{ github.event.inputs.version }}"
        
        # 验证版本号格式
        if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
          echo "❌ 版本号格式错误: $VERSION"
          echo "✅ 正确格式: x.y.z (例如: 2.0.1)"
          exit 1
        fi
        
        # 检查标签是否已存在
        if git tag | grep -q "^v$VERSION$"; then
          echo "⚠️ 版本 v$VERSION 已存在"
          echo "📋 现有标签:"
          git tag | grep "^v" | sort -V | tail -5
          exit 1
        fi
        
        echo "✅ 版本验证通过: v$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Check code version consistency
      run: |
        VERSION="${{ steps.validate.outputs.version }}"
        
        # 检查代码中的版本号
        CODE_VERSION=$(grep -E '^VERSION\s*=\s*"v[0-9]+\.[0-9]+\.[0-9]+"' torrent_maker.py | sed -E 's/.*"v([0-9]+\.[0-9]+\.[0-9]+)".*/\1/' | head -1)
        
        if [ "$CODE_VERSION" != "$VERSION" ]; then
          echo "⚠️ 版本不一致:"
          echo "   输入版本: $VERSION"
          echo "   代码版本: $CODE_VERSION"
          echo ""
          echo "💡 建议:"
          echo "   1. 更新 torrent_maker.py 中的 VERSION 变量"
          echo "   2. 或使用代码版本 $CODE_VERSION 进行发布"
          echo ""
          echo "🔄 继续使用输入版本进行发布..."
        else
          echo "✅ 版本一致性检查通过"
        fi
    
    - name: Validate torrent_maker.py
      run: |
        echo "🔍 验证 torrent_maker.py..."
        python3 -m py_compile torrent_maker.py
        echo "✅ 语法验证通过"
        
        echo "📊 文件信息:"
        ls -lh torrent_maker.py
        wc -l torrent_maker.py
    
    - name: Generate release notes
      id: release_notes
      run: |
        VERSION="v${{ steps.validate.outputs.version }}"
        
        # 生成发布说明
        cat << EOF > release_notes.md
## 🚀 Torrent Maker $VERSION - 手动发布

### ✨ 版本特性
- 高性能种子制作工具
- 基于 mktorrent 的半自动化流程
- 智能搜索和批量处理功能
- 完整的用户体验优化

### 📥 快速开始

#### 方式一：一键安装（推荐）
\`\`\`bash
curl -fsSL https://raw.githubusercontent.com/Yan-nian/torrent-maker/main/scripts/install.sh | bash
\`\`\`

#### 方式二：直接下载
\`\`\`bash
# 下载单文件版本
curl -O https://github.com/Yan-nian/torrent-maker/releases/download/$VERSION/torrent_maker.py

# 直接运行
python3 torrent_maker.py
\`\`\`

#### 方式三：Git 克隆
\`\`\`bash
git clone https://github.com/Yan-nian/torrent-maker.git
cd torrent-maker
python3 torrent_maker.py
\`\`\`

### 📋 系统要求
- **Python**: 3.7+ (推荐 3.9+)
- **mktorrent**: 必需的种子创建工具
- **内存**: 512MB+ (推荐 1GB+)
- **存储**: 10MB (单文件版本)

### 🔧 安装 mktorrent
- **macOS**: \`brew install mktorrent\`
- **Ubuntu/Debian**: \`sudo apt install mktorrent\`
- **CentOS/RHEL**: \`sudo yum install mktorrent\`

### 🌍 支持平台
- ✅ macOS (完全支持)
- ✅ Linux (Ubuntu, Debian, CentOS, RHEL)
- ✅ Windows (WSL 环境)

---

💡 **提示**: 这是手动发布版本，包含所有核心功能，开箱即用！
EOF
        
        echo "📝 Release notes 已生成"
    
    - name: Create release package
      run: |
        VERSION="v${{ steps.validate.outputs.version }}"
        echo "📦 创建发布包..."
        
        # 创建发布目录
        mkdir -p release
        
        # 复制核心文件
        cp torrent_maker.py release/
        cp scripts/install.sh release/
        cp README.md release/
        cp requirements.txt release/
        cp LICENSE release/
        
        # 创建压缩包
        cd release
        tar -czf "torrent-maker-$VERSION-manual.tar.gz" *
        cd ..
        
        echo "✅ 发布包创建完成"
        ls -la release/
    
    - name: Create Git tag
      run: |
        VERSION="v${{ steps.validate.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "$VERSION" -m "Manual Release $VERSION"
        git push origin "$VERSION"
        
        echo "🏷️ 标签 $VERSION 已创建"
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.validate.outputs.version }}
        name: 🎬 Torrent Maker v${{ steps.validate.outputs.version }} (Manual)
        body_path: release_notes.md
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          torrent_maker.py
          scripts/install.sh
          README.md
          requirements.txt
          LICENSE
          release/torrent-maker-v${{ steps.validate.outputs.version }}-manual.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Notify completion
      run: |
        VERSION="v${{ steps.validate.outputs.version }}"
        DRAFT="${{ github.event.inputs.draft }}"
        PRERELEASE="${{ github.event.inputs.prerelease }}"
        
        echo "🎉 手动发布完成！"
        echo "📋 版本: $VERSION"
        echo "📝 草稿: $DRAFT"
        echo "🧪 预发布: $PRERELEASE"
        echo "🔗 Release: https://github.com/Yan-nian/torrent-maker/releases/tag/$VERSION"
        
        if [ "$DRAFT" = "false" ] && [ "$PRERELEASE" = "false" ]; then
          echo "📥 安装命令: curl -fsSL https://raw.githubusercontent.com/Yan-nian/torrent-maker/main/scripts/install.sh | bash"
        fi