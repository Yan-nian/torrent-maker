name: Auto Release

# 自动发布工作流 - 当 torrent_maker.py 版本变更时触发
on:
  push:
    branches: [ main ]
    paths:
      - 'torrent_maker.py'
  workflow_dispatch:  # 添加手动触发选项
    inputs:
      force_release:
        description: '强制发布（即使版本已存在）'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

# 设置权限
permissions:
  contents: write
  pull-requests: read

jobs:
  auto-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Extract version and check if release needed
      id: version
      run: |
        # 从 torrent_maker.py 提取版本号
        VERSION=$(grep -E '^VERSION\s*=\s*"v[0-9]+\.[0-9]+\.[0-9]+"' torrent_maker.py | sed -E 's/.*"v([0-9]+\.[0-9]+\.[0-9]+)".*/\1/' | head -1)
        
        if [ -z "$VERSION" ]; then
          echo "❌ 无法从 torrent_maker.py 提取版本号"
          exit 1
        fi
        
        echo "📋 检测到版本: v$VERSION"
        
        # 检查标签是否已存在和强制发布选项
        FORCE_RELEASE="${{ github.event.inputs.force_release || 'false' }}"
        
        if git tag | grep -q "^v$VERSION$" && [ "$FORCE_RELEASE" != "true" ]; then
          echo "⚠️ 版本 v$VERSION 已存在，跳过发布（使用 force_release=true 可强制发布）"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          if [ "$FORCE_RELEASE" = "true" ]; then
            echo "🔄 强制发布模式：v$VERSION"
          else
            echo "✅ 新版本 v$VERSION，准备发布"
          fi
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Validate torrent_maker.py
      if: steps.version.outputs.should_release == 'true'
      run: |
        echo "🔍 验证 torrent_maker.py..."
        python3 -m py_compile torrent_maker.py
        echo "✅ 语法验证通过"
        
        echo "📊 文件信息:"
        ls -lh torrent_maker.py
        wc -l torrent_maker.py
    
    - name: Generate release notes
      if: steps.version.outputs.should_release == 'true'
      id: release_notes
      run: |
        VERSION="v${{ steps.version.outputs.version }}"
        
        # 生成发布说明
        VERSION="v${{ steps.version.outputs.version }}"
        
        # 创建发布说明文件
        echo "## 🚀 Torrent Maker $VERSION" > release_notes.md
        echo "" >> release_notes.md
        echo "### ✨ 新版本发布" >> release_notes.md
        echo "- 性能优化和功能改进" >> release_notes.md
        echo "- 修复已知问题" >> release_notes.md
        echo "- 提升用户体验" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 📥 快速开始" >> release_notes.md
        echo "" >> release_notes.md
        echo "### 方式一：一键安装（推荐）" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo 'curl -fsSL https://raw.githubusercontent.com/Yan-nian/torrent-maker/main/scripts/install.sh | bash' >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### 方式二：直接下载" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo '# 下载单文件版本' >> release_notes.md
        echo "curl -O https://github.com/Yan-nian/torrent-maker/releases/download/$VERSION/torrent_maker.py" >> release_notes.md
        echo "" >> release_notes.md
        echo '# 直接运行' >> release_notes.md
        echo 'python3 torrent_maker.py' >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "### 方式三：Git 克隆" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo 'git clone https://github.com/Yan-nian/torrent-maker.git' >> release_notes.md
        echo 'cd torrent-maker' >> release_notes.md
        echo 'python3 torrent_maker.py' >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "## 📋 系统要求" >> release_notes.md
        echo "- **Python**: 3.7+ (推荐 3.9+)" >> release_notes.md
        echo "- **mktorrent**: 必需的种子创建工具" >> release_notes.md
        echo "- **内存**: 512MB+ (推荐 1GB+)" >> release_notes.md
        echo "- **存储**: 10MB (单文件版本)" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🔧 安装 mktorrent" >> release_notes.md
        echo "- **macOS**: \\`brew install mktorrent\\`" >> release_notes.md
        echo "- **Ubuntu/Debian**: \\`sudo apt install mktorrent\\`" >> release_notes.md
        echo "- **CentOS/RHEL**: \\`sudo yum install mktorrent\\`" >> release_notes.md
        echo "" >> release_notes.md
        echo "## 🌍 支持平台" >> release_notes.md
        echo "- ✅ macOS (完全支持)" >> release_notes.md
        echo "- ✅ Linux (Ubuntu, Debian, CentOS, RHEL)" >> release_notes.md
        echo "- ✅ Windows (WSL 环境)" >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "" >> release_notes.md
        echo "💡 **提示**: 这是自动发布版本，包含最新功能和修复，开箱即用！" >> release_notes.md
        
        echo "📝 Release notes 已生成"
    
    - name: Create release package
      if: steps.version.outputs.should_release == 'true'
      run: |
        VERSION="v${{ steps.version.outputs.version }}"
        echo "📦 创建发布包..."
        
        # 创建发布目录
        mkdir -p release
        
        # 复制核心文件
        cp torrent_maker.py release/
        cp scripts/install.sh release/
        cp README.md release/
        cp requirements.txt release/
        cp LICENSE release/
        
        # 创建压缩包
        cd release
        tar -czf "torrent-maker-$VERSION.tar.gz" *
        cd ..
        
        echo "✅ 发布包创建完成"
        ls -la release/
    
    - name: Create Git tag
      if: steps.version.outputs.should_release == 'true'
      run: |
        VERSION="v${{ steps.version.outputs.version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        git tag -a "$VERSION" -m "Auto Release $VERSION"
        git push origin "$VERSION"
        
        echo "🏷️ 标签 $VERSION 已创建"
    
    - name: Create GitHub Release
      if: steps.version.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: 🚀 Torrent Maker v${{ steps.version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          torrent_maker.py
          scripts/install.sh
          README.md
          requirements.txt
          LICENSE
          release/torrent-maker-v${{ steps.version.outputs.version }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Notify completion
      if: steps.version.outputs.should_release == 'true'
      run: |
        VERSION="v${{ steps.version.outputs.version }}"
        echo "🎉 自动发布完成！"
        echo "📋 版本: $VERSION"
        echo "🔗 Release: https://github.com/Yan-nian/torrent-maker/releases/tag/$VERSION"
        echo "📥 安装命令: curl -fsSL https://raw.githubusercontent.com/Yan-nian/torrent-maker/main/scripts/install.sh | bash"
    
    - name: Skip notification
      if: steps.version.outputs.should_release == 'false'
      run: |
        VERSION="v${{ steps.version.outputs.version }}"
        echo "ℹ️ 版本 $VERSION 已存在，跳过发布"
        echo "🔗 现有 Release: https://github.com/Yan-nian/torrent-maker/releases/tag/$VERSION"